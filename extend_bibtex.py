''' This is a Python script that processes a bibtex file input_bibtex that had been automatically generated by
precision conference  for NIME 2017. It makes a lot of assumptions about particular type setting,
e.g. the number of spaces used, captitalization,  and what is initially set as booktitle. It also assumes that there are html index files in folders 000k with names that follow exactly the order of the bibtex entries of the input .bib file.
It uses  "" instead of {} for bibtex entries.
So expect that you need to adapt a lot of details, if you have slightly different formatting than for NIME 2017.
The script does the following:
+ it extracts the abstract from an html file papers/000k/index.html and puts it to the abstract field of the entry k.
+ it updates the bibtex key to firstnameinitiallastnameoffirstauthor:2017
   (e.g., amuller:2017 for first author Albert Eric Muller)
+ it adds the following information:
  + Booktitle = {Proceedings of the International Conference on New Interfaces for Musical Expression},
  + Address = {Copenhagen, Denmark},
  + Publisher = {Aalborg University Copenhagen},
+ it puts an url field pointing at the corresponding paper
  Url = {http://www.nime.org/proceedings/2017/nime2017_paper000k.pdf}

It keeps all the codes for the  special symbols &#8217; &#8212; &#8221; &#8211; &#8220; &#8482; &#8216; &#160;
The script has been tested under Python 3.52.
This Script comes with no warranty whatsoever. Feel free to modify and redistribute.
Vesion 0.0: Hendrik Purwins hpu@create.aau.dk, Aalborg University Copenhagen, September 29th, 2017
'''

import string
import re

input_bibtex='input.bib'
output_bibtex='output.bib'

paper_max=105 # number of papers

abstract_path_root="/Users/hendrik/Documents/reviews/conferences/nime17/NIME17Proc/papers/" # append 0001/index.html
year=2017
insert_txt= "Booktitle = {Proceedings of the International Conference on New Interfaces for Musical Expression},\n  Address = {Copenhagen, Denmark},\n  Publisher = {Aalborg University Copenhagen},\n  "

booktitle_str='booktitle =	 "NIME",'
url_str_root="Url = {http://www.nime.org/proceedings/2017/nime2017_paper"

# read from input
in_id=open(input_bibtex, 'r')
inbib=in_id.read()
in_id.close()

outbib=""
for i in range(1,paper_max+1):
    # segment each publication into one  bibentry  and shorten the inbib to start after the processed bibentry
    bibkey="@inproceedings{"
    bibkeylength=len(bibkey)
    bibkeystart=inbib.find(bibkey)
    afterbibkey=bibkeystart+bibkeylength
    if i != paper_max:
        nextbibkeystartpos=re.search('@inproceedings{',inbib[afterbibkey:])
        nextbibkeystart= nextbibkeystartpos.span()[0]
        bibentry=inbib[0:afterbibkey+nextbibkeystart-1]
        inbib=inbib[afterbibkey+nextbibkeystart:]
    else:
        bibentry = inbib
        inbib=''

    # get first author's beginnig and end indices
    authorkey="author =	 \""
    authorkeylength=len(authorkey)
    authorkeystart=bibentry.find(authorkey)
    firstauthorstart=authorkeystart+authorkeylength
    andpos=re.search(r'\s+and\s+',bibentry[firstauthorstart:])
    quotpos=re.search('\"',bibentry[firstauthorstart:])
    endcand2=quotpos.span()[0]
    if andpos is None:
        relend=endcand2
    else:
        endcand1=andpos.span()[0]
        if min(endcand1,endcand2)<0:
            relend=max(endcand1,endcand2)
        else:
            relend=min(endcand1,endcand2)

    firstauthor=bibentry[firstauthorstart:firstauthorstart+relend]
    firstauthor

    # get initial of first name
    initial=firstauthor[0].lower()
    initial

    # get lastname
    m = re.search('\w+\Z', firstauthor)
    lastn=m.group(0).lower()
    lastn
    # replace bibtex keyword
    bibentry=re.sub(r"@inproceedings{\S+,","@inproceedings{"+initial+lastn+":"+str(year)+",",bibentry)



    # create pdf index for url and abstract index
    if i<10:
        num_str="000"+str(i)
    elif i<100:
        num_str = "00" + str(i)
    elif i<1000:
        num_str = "0" + str(i)
    else:
        print("Too many papers")




    # get abstract from html file
    abstract_id=open(abstract_path_root+num_str+"/index.html", 'r')
    abstract_html=abstract_id.read()
    in_id.close()

    abstractkey="<p id=abstract>"
    abstractkeylength=len(abstractkey)
    abstractkeystart=abstract_html.find(abstractkey)
    abstractstart=abstractkeystart+abstractkeylength
    abstractendpos=re.search('</p>',abstract_html[abstractstart:])
    abstractrelend=abstractendpos.span()[0]
    abstracttxt=abstract_html[abstractstart:abstractstart+abstractrelend]
    abstracttxt=re.sub(r'\n\s+',"\n     ",abstracttxt) # remove newlines and extra spaces
    abstracttxt = '  abstract = {'+abstracttxt+'},'

    additions_txt=insert_txt+url_str_root+num_str+".pdf},\n"+abstracttxt

    # insert additional bibtex info
    bibentry=re.sub(booktitle_str,additions_txt,bibentry)

    # concatenate processed bibtex entries
    outbib=outbib+bibentry+'\n'

# write output bibtex file
out_id=open(output_bibtex, 'w+')
out_id.write(outbib)
out_id.close()



